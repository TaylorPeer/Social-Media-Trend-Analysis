{
  "paragraphs": [
    {
      "title": "Reddit Top Terms",
      "text": "val wordCounts \u003d computeTopTerms(redditRDD, 20)\nprintln(convertTermCountsToOutputText(wordCounts))",
      "dateUpdated": "Mar 14, 2016 4:04:58 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Occurrences",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "Occurrences",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457873495096_-635708837",
      "id": "20160313-135135_281890959",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Term\tOccurrences\npeople\t81783\n[deleted]\t72525\ngood\t56609\ntime\t56277\nwant\t43512\ngame\t34244\nsay\t33039\nright\t31146\nuse\t30098\npretty\t30044\nactually\t29601\nsure\t29012\nbetter\t28842\nlot\t28818\nfuck\t28510\nthing\t28345\nwork\t27648\nnew\t24991\nlook\t24210\nlove\t23788\n\n"
      },
      "dateCreated": "Mar 13, 2016 1:51:35 PM",
      "dateStarted": "Mar 14, 2016 4:04:59 PM",
      "dateFinished": "Mar 14, 2016 4:06:20 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Twitter Top Terms",
      "text": "val wordCounts \u003d computeTopTerms(tweetsRDD, 20)\nprintln(convertTermCountsToOutputText(wordCounts))",
      "dateUpdated": "Mar 14, 2016 4:04:57 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Occurrences",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "Occurrences",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457876254899_-11479200",
      "id": "20160313-143734_1248101358",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Term\tOccurrences\nrt\t734745\nlol\t70627\nlove\t64369\n:)\t54692\ngood\t42941\nwant\t38502\nque\t38205\nnew\t37928\npeople\t37667\nfollow\t35383\ntime\t33853\nday\t32550\nhaha\t30179\n\\u0645\\u0646\t25423\nshit\t25246\nya\t24749\n:d\t23509\ntoday\t23192\nlife\t22828\nhappy\t22237\n\n"
      },
      "dateCreated": "Mar 13, 2016 2:37:34 PM",
      "dateStarted": "Mar 14, 2016 4:04:57 PM",
      "dateFinished": "Mar 14, 2016 4:06:03 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Reddit Top Terms in Popular Posts",
      "text": "val topRedditRDD \u003d redditRDD.filter(post \u003d\u003e post.popularity \u003e\u003d 100)\nval wordCounts \u003d computeTopTerms(topRedditRDD, 20)\nprintln(convertTermCountsToOutputText(wordCounts))",
      "dateUpdated": "Mar 14, 2016 4:04:44 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Occurrences",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "Occurrences",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457882965957_1594421596",
      "id": "20160313-162925_1551536870",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Term\tOccurrences\npeople\t507\ntime\t364\ngood\t258\nwant\t223\nsay\t210\nright\t196\nguy\t188\nactually\t185\n[deleted]\t179\nday\t176\nthing\t173\nshit\t167\nman\t165\nfuck\t162\nyears\t161\npretty\t159\ngame\t158\nprobably\t154\nlook\t153\nlittle\t149\n\n"
      },
      "dateCreated": "Mar 13, 2016 4:29:25 PM",
      "dateStarted": "Mar 14, 2016 4:04:44 PM",
      "dateFinished": "Mar 14, 2016 4:04:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Twitter Top Terms In Popular Tweets",
      "text": "val topTweetsRDD \u003d tweetsRDD.filter(post \u003d\u003e post.popularity \u003e\u003d 100)\nval wordCounts \u003d computeTopTerms(topTweetsRDD, 20)\nprintln(convertTermCountsToOutputText(wordCounts))",
      "dateUpdated": "Mar 14, 2016 4:04:32 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Occurrences",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457882984091_305143356",
      "id": "20160313-162944_2068687721",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Term\tOccurrences\nrt\t44851\nlove\t2540\npeople\t2112\n@xstrology:\t1410\nwant\t1380\nlife\t1323\nque\t1182\ntime\t1124\ngood\t964\nsay\t954\nhate\t872\nperson\t870\nmoment\t833\nbest\t831\nday\t807\ngirl\t804\ngod\t753\n@autocorrects:\t706\nawkward\t703\nlook\t672\n\n"
      },
      "dateCreated": "Mar 13, 2016 4:29:44 PM",
      "dateStarted": "Mar 14, 2016 4:04:32 PM",
      "dateFinished": "Mar 14, 2016 4:04:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Reddit Upward Trending Terms",
      "text": "val reddit2012 \u003d redditRDD.filter(Post \u003d\u003e Post.created_at.toLong \u003c 1359529600)\nval reddit2014 \u003d redditRDD.filter(Post \u003d\u003e Post.created_at.toLong \u003e 1359529600)\nval topRedditTerms2012 \u003d computeTopTerms(reddit2012, 100)\nval topRedditTerms2014 \u003d computeTopTerms(reddit2014, 100)\nval redditTermRanks2012 \u003d convertOccurencesToRanks(topRedditTerms2012)\nval redditTermRanks2014 \u003d convertOccurencesToRanks(topRedditTerms2014)\nvar redditRankChanges \u003d computeTermRankChanges(redditTermRanks2012, redditTermRanks2014).sortBy(_._4).reverse\nredditRankChanges \u003d redditRankChanges.filter(entry \u003d\u003e entry._3 !\u003d 0)\nprintln(convertRankChangesToOutputText(redditRankChanges.take(20)))\n\n",
      "dateUpdated": "Mar 14, 2016 4:03:52 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Change",
              "index": 3.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "January, 2012",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457957975170_973208809",
      "id": "20160314-131935_269368591",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Term\tJanuary, 2012\tSeptember, 2014\tChange\nfuck\t54\t7\t47\ngames\t100\t61\t39\nbig\t68\t47\t21\nplay\t46\t25\t21\nlooking\t84\t65\t19\nusing\t93\t75\t18\nstart\t85\t67\t18\nable\t96\t79\t17\nlooks\t77\t60\t17\n:)\t75\t58\t17\npost\t55\t38\t17\nthanks\t59\t44\t15\nyeah\t48\t35\t13\nend\t78\t68\t10\nmaybe\t47\t37\t10\ngame\t16\t6\t10\nhard\t72\t64\t8\nyear\t51\t43\t8\nhelp\t69\t62\t7\nhaving\t64\t57\t7\n\n"
      },
      "dateCreated": "Mar 14, 2016 1:19:35 PM",
      "dateStarted": "Mar 14, 2016 4:03:06 PM",
      "dateFinished": "Mar 14, 2016 4:03:23 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Twitter Upward Trending Terms",
      "text": "val tweets2012 \u003d tweetsRDD.filter(Post \u003d\u003e Post.created_at.contains(\"2012\"))\nval tweets2014 \u003d tweetsRDD.filter(Post \u003d\u003e Post.created_at.contains(\"2014\"))\nval topTweetTerms2012 \u003d computeTopTerms(tweets2012, 100)\nval topTweetTerms2014 \u003d computeTopTerms(tweets2014, 100)\nval twitterTermRanks2012 \u003d convertOccurencesToRanks(topTweetTerms2012)\nval twitterTermRanks2014 \u003d convertOccurencesToRanks(topTweetTerms2014)\nvar tweetRankChanges \u003d computeTermRankChanges(twitterTermRanks2012, twitterTermRanks2014).sortBy(_._4).reverse\n\ntweetRankChanges \u003d tweetRankChanges.filter(entry \u003d\u003e entry._3 !\u003d 0)\nprintln(convertRankChangesToOutputText(tweetRankChanges.take(20)))",
      "dateUpdated": "Mar 14, 2016 4:04:24 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Change",
              "index": 3.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "January, 2012",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457958371615_2094566318",
      "id": "20160314-132611_1818009418",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Term\tJanuary, 2012\tSeptember, 2014\tChange\n\\u0641\\u064a\t79\t12\t67\n\\u0645\\u0646\t45\t5\t40\nwatch\t100\t64\t36\ngod\t98\t62\t36\ngreat\t74\t39\t35\nschool\t58\t28\t30\nna\t53\t26\t27\nreal\t72\t47\t25\nthanks\t55\t30\t25\nyang\t64\t40\t24\nbig\t97\t77\t20\ngame\t70\t50\t20\ngetting\t89\t70\t19\nlife\t31\t13\t18\nstop\t85\t69\t16\nhope\t93\t79\t14\nbad\t80\t66\t14\nhappy\t29\t15\t14\ntoday\t26\t14\t12\nmiss\t59\t48\t11\n\n"
      },
      "dateCreated": "Mar 14, 2016 1:26:11 PM",
      "dateStarted": "Mar 14, 2016 4:03:28 PM",
      "dateFinished": "Mar 14, 2016 4:04:19 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Reddit Downward Trending Terms",
      "text": "val reddit2012 \u003d redditRDD.filter(Post \u003d\u003e Post.created_at.toLong \u003c 1359529600)\nval reddit2014 \u003d redditRDD.filter(Post \u003d\u003e Post.created_at.toLong \u003e 1359529600)\nval topRedditTerms2012 \u003d computeTopTerms(reddit2012, 100)\nval topRedditTerms2014 \u003d computeTopTerms(reddit2014, 100)\nval redditTermRanks2012 \u003d convertOccurencesToRanks(topRedditTerms2012)\nval redditTermRanks2014 \u003d convertOccurencesToRanks(topRedditTerms2014)\nvar redditRankChanges \u003d computeTermRankChanges(redditTermRanks2012, redditTermRanks2014).sortBy(_._4)\nredditRankChanges \u003d redditRankChanges.filter(entry \u003d\u003e entry._3 !\u003d 0)\nprintln(convertRankChangesToOutputText(redditRankChanges.take(20)))\n\n",
      "dateUpdated": "Mar 14, 2016 4:02:29 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Change",
              "index": 3.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "January, 2012",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457881045444_-1121260902",
      "id": "20160313-155725_1905505738",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Term\tJanuary, 2012\tSeptember, 2014\tChange\nbelieve\t52\t89\t-37\nread\t43\t72\t-29\ntell\t57\t78\t-21\nthought\t34\t50\t-16\nguy\t36\t52\t-16\nlife\t37\t53\t-16\nidea\t70\t86\t-16\nwrong\t76\t92\t-16\nperson\t56\t71\t-15\nworld\t67\t81\t-14\nmoney\t50\t63\t-13\nsaying\t62\t73\t-11\nold\t66\t77\t-11\nseen\t86\t97\t-11\nmakes\t38\t48\t-10\nproblem\t73\t83\t-10\noh\t74\t84\t-10\nkind\t61\t70\t-9\nmean\t41\t49\t-8\nmaking\t82\t90\t-8\n\n"
      },
      "dateCreated": "Mar 13, 2016 3:57:25 PM",
      "dateStarted": "Mar 14, 2016 4:02:29 PM",
      "dateFinished": "Mar 14, 2016 4:02:47 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Twitter Downward Trending Terms",
      "text": "val tweets2012 \u003d tweetsRDD.filter(Post \u003d\u003e Post.created_at.contains(\"2012\"))\nval tweets2014 \u003d tweetsRDD.filter(Post \u003d\u003e Post.created_at.contains(\"2014\"))\nval topTweetTerms2012 \u003d computeTopTerms(tweets2012, 100)\nval topTweetTerms2014 \u003d computeTopTerms(tweets2014, 100)\nval twitterTermRanks2012 \u003d convertOccurencesToRanks(topTweetTerms2012)\nval twitterTermRanks2014 \u003d convertOccurencesToRanks(topTweetTerms2014)\nvar tweetRankChanges \u003d computeTermRankChanges(twitterTermRanks2012, twitterTermRanks2014).sortBy(_._4)\ntweetRankChanges \u003d tweetRankChanges.filter(entry \u003d\u003e entry._3 !\u003d 0)\nprintln(convertRankChangesToOutputText(tweetRankChanges.take(20)))\n\n",
      "dateUpdated": "Mar 14, 2016 4:02:27 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Change",
              "index": 3.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "January, 2012",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457877070066_-1256577547",
      "id": "20160313-145110_984628181",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Term\tJanuary, 2012\tSeptember, 2014\tChange\nyg\t17\t82\t-65\nhahaha\t40\t94\t-54\nhaha\t7\t52\t-45\nen\t34\t68\t-34\noh\t22\t53\t-31\naku\t30\t56\t-26\nass\t42\t67\t-25\ntell\t63\t88\t-25\nya\t15\t38\t-23\nque\t5\t21\t-16\n:)\t3\t16\t-13\nyear\t69\t81\t-12\nmorning\t86\t98\t-12\nsay\t18\t29\t-11\nhate\t35\t46\t-11\nlol\t2\t10\t-8\ntwitter\t37\t45\t-8\nwork\t51\t58\t-7\nhome\t66\t72\t-6\ndi\t20\t25\t-5\n\n"
      },
      "dateCreated": "Mar 13, 2016 2:51:10 PM",
      "dateStarted": "Mar 14, 2016 4:01:18 PM",
      "dateFinished": "Mar 14, 2016 4:02:12 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Length of Posts (in Characters)",
      "text": "def round(i: Double, v: Integer): Integer \u003d {\n    return (Math.round(i / v) * v).toInt\n}\n\ndef computeLengths(postRdd: RDD[Post]): Array[(Integer, Int)] \u003d {\n    val lengthCounts \u003d postRdd.filter(t \u003d\u003e t.text !\u003d \"[deleted]\").map(\n        p \u003d\u003e if (p.platform \u003d\u003d \"Twitter\" \u0026\u0026 p.text.length() \u003e 140) (round(p.text.length(), 5), 0) else (round(p.text.length(), 5), 1))\n            .reduceByKey(_ + _).sortBy(_._2)\n    val lengths \u003d lengthCounts.takeOrdered(1000)(Ordering[Int].on(x \u003d\u003e x._1))\n    return lengths;\n}\nval redditLengths \u003d computeLengths(redditRDD)\nval twitterLengths \u003d computeLengths(tweetsRDD)\n\ndef convertLengthsToOutputText(first: Array[(Integer, Int)], second: Array[(Integer, Int)]): String \u003d {\n    var output \u003d \"%table Length\" + \"\\t\" + \"Reddit\" + \"\\t\" + \"Twitter\" + \"\\n\"\n    var i \u003d 0\n    for (a \u003c- 1 to 100) {\n        output \u003d output + (a)*5 + \"\\t\" + first(a)._2 + \"\\t\" +  second(a)._2 + \"\\n\"\n    }\n    return output\n}\nprintln(convertLengthsToOutputText(redditLengths, twitterLengths))",
      "dateUpdated": "Mar 14, 2016 4:01:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "lineChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Length",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Reddit",
              "index": 1.0,
              "aggr": "sum"
            },
            {
              "name": "Twitter",
              "index": 2.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Length",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "Reddit",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457952095316_-297701349",
      "id": "20160314-114135_1544679395",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Length\tReddit\tTwitter\n5\t19687\t16501\n10\t26677\t30429\n15\t29891\t54842\n20\t32399\t82586\n25\t33242\t108957\n30\t33678\t113886\n35\t32041\t116085\n40\t31269\t115868\n45\t29721\t112275\n50\t27962\t107502\n55\t26572\t104068\n60\t25434\t99750\n65\t23941\t94787\n70\t22493\t90065\n75\t21709\t84878\n80\t20071\t80082\n85\t18975\t75242\n90\t17732\t72977\n95\t17021\t66917\n100\t16041\t63426\n105\t15184\t61915\n110\t14568\t56404\n115\t13819\t52021\n120\t12895\t50304\n125\t12210\t51328\n130\t11747\t54231\n135\t11052\t63510\n140\t10507\t103395\n145\t10055\t0\n150\t9534\t0\n155\t9136\t0\n160\t8681\t0\n165\t8353\t0\n170\t7978\t0\n175\t7607\t0\n180\t7299\t0\n185\t6922\t0\n190\t6686\t0\n195\t6350\t0\n200\t6011\t0\n205\t5907\t0\n210\t5851\t0\n215\t5447\t0\n220\t5196\t0\n225\t5073\t0\n230\t4948\t0\n235\t4623\t0\n240\t4488\t0\n245\t4123\t0\n250\t4209\t0\n255\t4026\t0\n260\t3867\t0\n265\t3771\t0\n270\t3636\t0\n275\t3539\t0\n280\t3357\t0\n285\t3397\t0\n290\t3215\t0\n295\t3051\t0\n300\t2977\t0\n305\t2781\t0\n310\t2768\t0\n315\t2671\t0\n320\t2850\t0\n325\t2481\t0\n330\t2502\t0\n335\t2434\t0\n340\t2371\t0\n345\t2334\t0\n350\t2180\t0\n355\t2064\t0\n360\t2142\t0\n365\t2063\t0\n370\t1993\t0\n375\t1936\t0\n380\t1832\t0\n385\t1917\t0\n390\t1870\t0\n395\t1722\t0\n400\t1680\t0\n405\t1635\t0\n410\t1653\t0\n415\t1550\t0\n420\t1530\t0\n425\t1463\t0\n430\t1506\t0\n435\t1393\t0\n440\t1360\t0\n445\t1390\t0\n450\t1357\t0\n455\t1273\t0\n460\t1348\t0\n465\t1278\t0\n470\t1173\t0\n475\t1239\t0\n480\t1206\t0\n485\t1213\t0\n490\t1137\t0\n495\t1046\t0\n500\t1157\t0\n\n"
      },
      "dateCreated": "Mar 14, 2016 11:41:35 AM",
      "dateStarted": "Mar 14, 2016 4:01:01 PM",
      "dateFinished": "Mar 14, 2016 4:01:10 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Related Terms across platforms",
      "text": "def convertCooccurenceCountsToOutputText(combined: List[(String, Int)], reddit: Array[(String, Int)], twitter: Array[(String, Int)]): String \u003d {\n    val twitterTermCount \u003d computeTotalWordCount(tweetsRDD)\n    val redditTermCount \u003d computeTotalWordCount(tweetsRDD)\n    var output \u003d \"%table Term\" + \"\\t\" + \"Reddit\" + \"\\t\" + \"Twitter\" + \"\\n\"\n    var i \u003d 0\n    combined.foreach {\n        entry \u003d\u003e\n            val r \u003d if (reddit.toMap.get(entry._1).isDefined) reddit.toMap.get(entry._1).get else 0\n            val t \u003d if (twitter.toMap.get(entry._1).isDefined) twitter.toMap.get(entry._1).get else 0\n            // for normalizing: output \u003d output + entry._1 + \"\\t\" + (r.toFloat / redditTermCount) + \"\\t\" + (t.toFloat / twitterTermCount) + \"\\n\"\n            output \u003d output + entry._1 + \"\\t\" + (r) + \"\\t\" + (t) + \"\\n\"\n      }\n    return output\n}\n\nval term \u003d z.input(\"Term\", \"\").toString;\nif (term.length \u003e 0) {\n    val filteredTweetsRDD \u003d tweetsRDD.filter(post \u003d\u003e post.text.contains(term))\n    val filteredRedditRDD \u003d redditRDD.filter(post \u003d\u003e post.text.contains(term))\n    val twitterWordCounts \u003d computeTopTerms(filteredTweetsRDD, 1000).filter(entry \u003d\u003e entry._1 !\u003d term)\n    val redditWordCounts \u003d computeTopTerms(filteredRedditRDD, 1000).filter(entry \u003d\u003e entry._1 !\u003d term)\n    var combinedWordCounts \u003d (twitterWordCounts ++ redditWordCounts ).groupBy( _._1 ).map( kv \u003d\u003e (kv._1, kv._2.map( _._2).sum ) ).toList.sortBy(_._2).reverse.take(10)\n    println(convertCooccurenceCountsToOutputText(combinedWordCounts, redditWordCounts, twitterWordCounts))\n}",
      "dateUpdated": "Mar 14, 2016 4:50:16 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Reddit",
              "index": 1.0,
              "aggr": "sum"
            },
            {
              "name": "Twitter",
              "index": 2.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Term",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "Reddit",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {
          "Term": "music"
        },
        "forms": {
          "Term": {
            "name": "Term",
            "displayName": "Term",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "jobName": "paragraph_1457960035381_748456323",
      "id": "20160314-135355_982820883",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Term\tReddit\tTwitter\nrt\t0\t3105\npeople\t1269\t214\nlove\t543\t611\nnew\t478\t616\ntime\t762\t191\nlisten\t464\t431\nsong\t574\t197\nvideo\t316\t399\ngreat\t494\t170\n#music\t0\t653\n\n"
      },
      "dateCreated": "Mar 14, 2016 1:53:55 PM",
      "dateStarted": "Mar 14, 2016 4:50:16 PM",
      "dateFinished": "Mar 14, 2016 4:50:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Top Twitter hashtags",
      "text": "%sql \nselect term, count(*) count from tweet_terms where substring(term, 0, 1) \u003d\u003d \"#\" group by term order by count desc limit 100",
      "dateUpdated": "Mar 14, 2016 4:48:16 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "term",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "term",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457968246218_-233313506",
      "id": "20160314-161046_225176961",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "term\tcount\n#teamfollowback\t3571\n#ff\t2872\n#np\t2850\n#oomf\t2809\n#gameinsight\t2073\n#nowplaying\t1822\n#android\t1693\n#nf\t1425\n#ipad\t1383\n#mtvema\t1324\n#jobs\t1274\n#rt\t1192\n#openfollow\t1172\n#bahrain\t1136\n#androidgames\t1136\n#30thingsaboutme\t1134\n#news\t1083\n#job\t1078\n#1\t1055\n#followback\t1031\n#\\u0627\\u0644\\u0633\\u0639\\u0648\\u062f\\u064a\\u0629\t1019\n#porn\t1016\n#500aday\t957\n#fb\t947\n#ipadgames\t936\n#follow\t919\n#sex\t898\n#iphone\t876\n#win\t872\n#retweet\t868\n#music\t838\n#menunggu17september\t823\n#\\u0627\\u0644\\u0631\\u064a\\u0627\\u0636\t813\n#highschoolmemories\t812\n#movie\t791\n#pisces\t748\n#tfb\t737\n#indyref\t731\n#xxx\t725\n#ksa\t705\n#nw\t693\n#celebrity\t691\n#lol\t685\n#free\t655\n#love\t641\n#aquarius\t636\n#taurus\t624\n#annasnurdayasayangcindyyuviajkt48\t617\n#winning\t605\n#kindle\t601\n#sagittarius\t585\n#\\u0627\\u0644\\u0647\\u0644\\u0627\\u0644\t577\n#movies\t571\n#cbb\t568\n#x\t568\n#tcot\t564\n#pussy\t562\n#mufc\t557\n#\\u062a\\u0637\\u0628\\u064a\\u0642_\\u0642\\u0631\\u0622\\u0646\\u0649\t553\n#teamautofollow\t548\n#aries\t547\n#hot\t541\n#\\ubbf8\\uce5c\\uac70\\uc544\\ub2c8\\uc57c\t529\n#sexy\t520\n#video\t518\n#gemini\t513\n#instantfollowback\t504\n#\\u0623\\u0633\\u0647\\u0645\t504\n#usa\t482\n#forumgrombyang\t474\n#sopa\t470\n#\\ud22c\\ud53c\\uc5e0\t467\n#libra\t459\n#\\u0631\\u062a\\u0648\\u064a\\u062a\t459\n#cancer\t454\n#ass\t453\n#mamacita\t449\n#fact\t448\n#tbt\t447\n#scorpio\t447\n#giveaway\t444\n#saudi\t441\n#ifollowback\t441\n#virgo\t438\n#deals\t432\n#followme\t430\n#usaheadlines\t428\n#itunes\t428\n#100thingsihate\t425\n#nfl\t425\n#jj\t425\n#soundcloud\t419\n#\\u2026\t419\n#shoutout\t418\n#1)\t418\n#smh\t417\n#neverforget\t415\n#\\u0627\\u0644\\u0646\\u0635\\u0631\t414\n#egypt\t401\n#2\t396\n"
      },
      "dateCreated": "Mar 14, 2016 4:10:46 PM",
      "dateStarted": "Mar 14, 2016 4:47:27 PM",
      "dateFinished": "Mar 14, 2016 4:47:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Edit Stopwords",
      "text": "print(updateStopwords(z.input(\"Add\", \"\").toString, z.input(\"Delete\", \"\").toString))",
      "dateUpdated": "Mar 14, 2016 4:09:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {
          "Delete": "",
          "Create": "theirs",
          "Add": "good"
        },
        "forms": {
          "Add": {
            "name": "Add",
            "displayName": "Add",
            "defaultValue": "",
            "hidden": false
          },
          "Delete": {
            "name": "Delete",
            "displayName": "Delete",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "jobName": "paragraph_1457954759487_539681871",
      "id": "20160314-122559_1946969947",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "Added \u0027good\u0027 to stopwords\n!, \u0026, \u0026amp;, ,, -, ., .., ..., :, ?, a, about, above, across, after, afterwards, again, against, all, almost, alone, along, already, also, although, always, am, among, amongst, amoungst, amount, an, and, another, any, anyhow, anyone, anything, anyway, anywhere, are, around, as, at, back, be, became, because, become, becomes, becoming, been, before, beforehand, behind, being, below, beside, besides, between, beyond, bill, both, bottom, but, by, call, can, can\u0027t, cannot, cant, co, computer, con, could, couldnt, cry, de, describe, detail, did, didn\u0027t, do, does, doesn\u0027t, don\u0027t, done, dont, down, due, during, each, eg, eight, either, eleven, else, elsewhere, empty, enough, etc, even, ever, every, everyone, everything, everywhere, except, few, fifteen, fify, fill, find, fire, first, five, for, former, formerly, forty, found, four, from, front, full, further, get, give, go, going, good, got, had, has, hasnt, have, he, hence, her, here, hereafter, hereby, herein, hereupon, hers, herself, him, himself, his, how, however, hundred, i, i\u0027ll, i\u0027m, i\u0027ve, ie, if, im, in, inc, indeed, interest, into, is, it, it\u0027s, its, itself, just, keep, know, last, latter, latterly, least, less, like, ltd, made, make, many, may, me, meanwhile, might, mill, mine, more, moreover, most, mostly, move, much, must, my, myself, name, namely, need, neither, never, nevertheless, next, nine, no, nobody, none, noone, nor, not, nothing, now, nowhere, of, off, often, on, once, one, only, onto, or, other, others, otherwise, our, ours, ourselves, out, over, own, part, per, perhaps, please, put, rather, re, really, said, same, see, seem, seemed, seeming, seems, serious, several, she, should, show, side, since, sincere, six, sixty, so, some, somehow, someone, something, sometime, sometimes, somewhere, still, such, suite](http://redditenhancementsuitecom)[reddit, system, take, ten, than, that, that\u0027s, the, their, theirs, them, themselves, then, thence, there, there\u0027s, thereafter, thereby, therefore, therein, thereupon, these, they, they\u0027re, thick, thin, things, think, third, this, those, though, three, through, throughout, thru, thus, to, together, too, top, toward, towards, twelve, twenty, two, u, un, under, until, up, upon, us, very, via, want, was, wasn\u0027t, way, we, well, were, what, whatever, when, whence, whenever, where, whereafter, whereas, whereby, wherein, whereupon, wherever, whether, which, while, whither, who, whoever, whole, whom, whose, why, will, with, within, without, would, yet, you, you\u0027re, your, yours, yourself, yourselves"
      },
      "dateCreated": "Mar 14, 2016 12:25:59 PM",
      "dateStarted": "Mar 14, 2016 4:09:25 PM",
      "dateFinished": "Mar 14, 2016 4:09:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Query functions",
      "text": "import org.apache.spark.sql.Row;\nimport org.apache.spark.sql.types.{StructType,StructField,StringType};\n\ndef computeTopTerms(postRdd: RDD[Post], count: Int): Array[(String, Int)] \u003d {\n  val words \u003d postRdd.flatMap(t \u003d\u003e t.text.toLowerCase().replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\,\", \"\").replaceAll(\"\\\\n\", \"\").trim().split(\" \"))\n  val filteredWords \u003d words.filter(word \u003d\u003e !stopwords.contains(word)).filter(word \u003d\u003e word.length() \u003e 1)\n  val wordCounts \u003d filteredWords.map(word \u003d\u003e (word, 1)).reduceByKey(_ + _).sortBy(_._2)\n  val topWords \u003d wordCounts.takeOrdered(count)(Ordering[Int].reverse.on(x \u003d\u003e x._2))\n  return topWords;\n}\n\ndef computeTotalWordCount(postRdd: RDD[Post]): Long \u003d {\n  val words \u003d postRdd.flatMap(t \u003d\u003e t.text.toLowerCase().replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\,\", \"\").replaceAll(\"\\\\n\", \"\").trim().split(\" \"))\n  val filteredWords \u003d words.filter(word \u003d\u003e !stopwords.contains(word)).filter(word \u003d\u003e word.length() \u003e 1)\n  return filteredWords.count()\n}\n\ndef convertOccurencesToRanks(termOccurences: Array[(String, Int)]): Array[(String, Int)] \u003d {\n  val sorted \u003d termOccurences.sortBy(_._2).reverse\n  var rank \u003d 0\n  val ranked \u003d sorted.map {\n    f \u003d\u003e\n      rank \u003d rank + 1\n      (f._1, rank)\n  }\n  return ranked\n}\n\ndef lookupRank(term: String, termRanks: Array[(String, Int)]): Int \u003d {\n  termRanks.filter(entry \u003d\u003e entry._1 \u003d\u003d term).foreach(x \u003d\u003e return x._2)\n  return 0;\n}\n\ndef computeTermRankChanges(before: Array[(String, Int)], after: Array[(String, Int)]): Array[(String, Int, Int, Int)] \u003d {\n  val rankChanges \u003d before.map {\n    entry \u003d\u003e\n      val term \u003d entry._1\n      val rankBefore \u003d entry._2\n      val rankAfter \u003d lookupRank(term, after)\n      val rankChange \u003d rankBefore - rankAfter\n      (term, rankBefore, rankAfter, rankChange)\n  }.filter(entry \u003d\u003e entry._2 !\u003d 0)\n  return rankChanges\n}\n\ndef convertTermCountsToOutputText(termCounts: Array[(String, Int)]): String \u003d {\n    var output \u003d \"%table Term\" + \"\\t\" + \"Occurrences\" + \"\\n\"\n    termCounts.foreach(l \u003d\u003e (output \u003d output + l._1 + \"\\t\" + l._2 + \"\\n\"))\n    return output\n}\n\ndef convertRankChangesToOutputText(rankChanges: Array[(String, Int, Int, Int)]): String \u003d {\n    var output \u003d \"%table Term\" + \"\\t\" + \"January, 2012\" + \"\\t\" + \"September, 2014\" + \"\\t\" + \"Change\" + \"\\n\"\n    rankChanges.foreach(l \u003d\u003e (output \u003d output + l._1 + \"\\t\" + l._2 + \"\\t\" + l._3 + \"\\t\" + l._4 + \"\\n\"))\n    return output\n}\n\ndef updateStopwords(toCreate: String, toDelete: String): String \u003d {\n    if (toCreate.length \u003e 0) {\n        stopwords \u003d stopwords + toCreate\n        println(\"Added \u0027\" + toCreate + \"\u0027 to stopwords\")\n    }\n    if (toDelete.length \u003e 0) {\n        stopwords \u003d stopwords.filter( _ !\u003d toDelete)\n        println(\"Removed \u0027\" + toDelete + \"\u0027 from stopwords\")\n    }\n    return stopwords.toSeq.sorted.mkString(\", \")\n}\n\nval words \u003d tweetsRDD.flatMap(t \u003d\u003e t.text.toLowerCase().replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\,\", \"\").trim().split(\" \"))\nval filteredWords \u003d words.filter(word \u003d\u003e !stopwords.contains(word)).filter(word \u003d\u003e word.length() \u003e 1)\n\n// The schema encoded as string\nval schemaString \u003d \"term\"\n\n// Generate the schema based on the string of schema\nval schema \u003d\n  StructType(\n    schemaString.split(\" \").map(fieldName \u003d\u003e StructField(fieldName, StringType, true)))\n\n// Convert records of the RDD (people) to Rows.\nval rowRDD \u003d filteredWords.map(entry \u003d\u003e (Row(entry)))\n\n// Apply the schema to the RDD.\nval tweetTermsDF \u003d sqlContext.createDataFrame(rowRDD, schema)\n\n// Register the DataFrames as a table.\ntweetTermsDF.registerTempTable(\"tweet_terms\")",
      "dateUpdated": "Mar 14, 2016 4:40:40 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "tableHide": false,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457871619001_255442194",
      "id": "20160313-132019_628220932",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.Row\nimport org.apache.spark.sql.types.{StructType, StructField, StringType}\ncomputeTopTerms: (postRdd: org.apache.spark.rdd.RDD[Post], count: Int)Array[(String, Int)]\ncomputeTotalWordCount: (postRdd: org.apache.spark.rdd.RDD[Post])Long\nconvertOccurencesToRanks: (termOccurences: Array[(String, Int)])Array[(String, Int)]\nlookupRank: (term: String, termRanks: Array[(String, Int)])Int\ncomputeTermRankChanges: (before: Array[(String, Int)], after: Array[(String, Int)])Array[(String, Int, Int, Int)]\nconvertTermCountsToOutputText: (termCounts: Array[(String, Int)])String\nconvertRankChangesToOutputText: (rankChanges: Array[(String, Int, Int, Int)])String\nupdateStopwords: (toCreate: String, toDelete: String)String\nwords: org.apache.spark.rdd.RDD[String] \u003d MapPartitionsRDD[515] at flatMap at \u003cconsole\u003e:72\nfilteredWords: org.apache.spark.rdd.RDD[String] \u003d MapPartitionsRDD[517] at filter at \u003cconsole\u003e:77\nschemaString: String \u003d term\nschema: org.apache.spark.sql.types.StructType \u003d StructType(StructField(term,StringType,true))\nrowRDD: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] \u003d MapPartitionsRDD[518] at map at \u003cconsole\u003e:81\ntweetTermsDF: org.apache.spark.sql.DataFrame \u003d [term: string]\n"
      },
      "dateCreated": "Mar 13, 2016 1:20:19 PM",
      "dateStarted": "Mar 14, 2016 4:40:40 PM",
      "dateFinished": "Mar 14, 2016 4:40:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load Data",
      "text": "import org.apache.spark.rdd.RDD\n\ndef loadTwitterData(Path: String): RDD[Post] \u003d {\n  val df \u003d sqlContext.read.json(Path)\n  val postsRDD \u003d df.map {\n    row \u003d\u003e\n      val textIndex \u003d row.fieldIndex(\"text\")\n      val createdAtIndex \u003d row.fieldIndex(\"created_at\")\n      val reweetsIndex \u003d row.fieldIndex(\"retweet_count\")\n      val text \u003d row.getString(textIndex)\n      val createdAt \u003d row.getString(createdAtIndex)\n      val popularity \u003d row.getString(reweetsIndex).replaceAll(\"\\\\+\", \"\").toLong\n      Post(text, createdAt, \"Twitter\", popularity)\n  }\n  return postsRDD\n}\n\ndef loadRedditData(Path: String): RDD[Post] \u003d {\n  val df \u003d sqlContext.read.json(Path)\n  val postsRDD \u003d df.map {\n    row \u003d\u003e\n      val textIndex \u003d row.fieldIndex(\"body\")\n      val createdAtIndex \u003d row.fieldIndex(\"created_utc\")\n      val ups \u003d row.fieldIndex(\"ups\")\n      val text \u003d row.getString(textIndex)\n      val createdAt \u003d row.getString(createdAtIndex)\n      val popularity \u003d row.getLong(ups)\n      Post(text, createdAt, \"Reddit\", popularity)\n  }\n  return postsRDD\n}\n\nvar tweetsRDD \u003d loadTwitterData(DataLocation + \"/twitter/merged_2500000.json\")\nvar redditRDD \u003d loadRedditData(DataLocation + \"/comments/merged_1000000.json\")\n\n// Subsample\n// tweetsRDD \u003d sc.parallelize(tweetsRDD.takeSample(false, 1000000, 4372))\n// redditRDD \u003d sc.parallelize(redditRDD.takeSample(false, 1000000, 4372))\n\nprintln(tweetsRDD.count() + \" Tweets loaded.\")\nprintln(redditRDD.count() + \" Reddit comments loaded.\")\n\n// Load stopwords\nvar stopwords \u003d sc.textFile(DataLocation + \"../stopwords.txt\").collect.toSet",
      "dateUpdated": "Mar 14, 2016 3:58:46 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1449400692473_-1377841118",
      "id": "20151206-121812_1445391401",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.rdd.RDD\nloadTwitterData: (Path: String)org.apache.spark.rdd.RDD[Post]\nloadRedditData: (Path: String)org.apache.spark.rdd.RDD[Post]\ntweetsRDD: org.apache.spark.rdd.RDD[Post] \u003d MapPartitionsRDD[50] at map at \u003cconsole\u003e:33\nredditRDD: org.apache.spark.rdd.RDD[Post] \u003d MapPartitionsRDD[62] at map at \u003cconsole\u003e:33\n2500000 Tweets loaded.\n1000000 Reddit comments loaded.\nstopwords: scala.collection.immutable.Set[String] \u003d Set(serious, latterly, down, side, it\u0027s, moreover, please, ourselves, that\u0027s, behind, for, find, further, mill, due, any, wherein, across, twenty, name, there\u0027s, this, in, move, myself, have, your, off, once, i\u0027ll, are, is, his, why, \u0026amp;, too, among, everyone, show, said, empty, already, nobody, got, less, am, hence, system, than, four, didn\u0027t, fire, anyhow, three, whereby, himself, con, twelve, throughout, ., but, you\u0027re, whether, below, co, mine, becomes, eleven, what, would, although, elsewhere, another, front, if, hereby, own, neither, bottom, up, going, etc, so, our, per, therein, must, beforehand, keep, do, all, him, u, had, somehow, re, onto, nor, every, herein, full, before, afterwards, somewhere, whither, \u0026, just, else, name..."
      },
      "dateCreated": "Dec 6, 2015 12:18:12 PM",
      "dateStarted": "Mar 14, 2016 3:58:46 PM",
      "dateFinished": "Mar 14, 2016 3:59:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Constants",
      "text": "val DataLocation \u003d \"/Users/taylorpeer/Projects/BI/data/\"\n\ncase class Post(text: String, created_at: String, platform: String, popularity: Long)",
      "dateUpdated": "Mar 14, 2016 3:54:38 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "editorHide": false,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1449400737755_764653651",
      "id": "20151206-121857_777102930",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "DataLocation: String \u003d /Users/taylorpeer/Projects/BI/data/\ndefined class Post\n"
      },
      "dateCreated": "Dec 6, 2015 12:18:57 PM",
      "dateStarted": "Mar 14, 2016 3:52:41 PM",
      "dateFinished": "Mar 14, 2016 3:53:00 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Dec 6, 2015 12:50:26 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1449402354229_1867469881",
      "id": "20151206-124554_379572014",
      "dateCreated": "Dec 6, 2015 12:45:54 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Social Media Analysis",
  "id": "SOCIAL",
  "angularObjects": {
    "2B5X9WYQZ": [],
    "2B5T346ZN": [],
    "2B56F97FV": [],
    "2B6739RWM": [],
    "2B8RQ9MXY": [],
    "2B7BHGNTN": [],
    "2B8MPEJT3": [],
    "2B6EC6BP7": [],
    "2B5YFH8P8": [],
    "2B5T2XRFM": [],
    "2B6UUAHSF": [],
    "2B7CCZ9PU": [],
    "2B762EZQS": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}